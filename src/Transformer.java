import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.security.KeyFactory;
import java.security.spec.X509EncodedKeySpec;
import java.security.ProtectionDomain;
import java.security.MessageDigest;
import java.util.Base64;

public class Transformer implements ClassFileTransformer {
    
    private Object f1C;
    private String f2B;

    @Override
    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
        if (className.equals("sun/management/VMManagementImpl")) {
            System.out.println("Applying Patch #1");
            classfileBuffer = Base64.getDecoder().decode("yv66vgAAADQBFQEAH3N1bi9tYW5hZ2VtZW50L1ZNTWFuYWdlbWVudEltcGwHAAEBABBqYXZhL2xhbmcvT2JqZWN0BwADAQAbc3VuL21hbmFnZW1lbnQvVk1NYW5hZ2VtZW50BwAFAQAGPGluaXQ+AQADKClWAQAEQ29kZQwABwAICgAEAAoBAAZ2bUFyZ3MBABBMamF2YS91dGlsL0xpc3Q7DAAMAA0JAAIADgEACXBlcmZJbnN0cgEAMUxzdW4vbWFuYWdlbWVudC9jb3VudGVyL3BlcmYvUGVyZkluc3RydW1lbnRhdGlvbjsMABAAEQkAAgASAQAKbm9QZXJmRGF0YQEAAVoMABQAFQkAAgAWAQALZ2V0VmVyc2lvbjABABQoKUxqYXZhL2xhbmcvU3RyaW5nOwEAGWluaXRPcHRpb25hbFN1cHBvcnRGaWVsZHMBACRpc0NvbXBpbGF0aW9uVGltZU1vbml0b3JpbmdTdXBwb3J0ZWQBAAMoKVoBABljb21wVGltZU1vbml0b3JpbmdTdXBwb3J0DAAdABUJAAIAHgEAJWlzVGhyZWFkQ29udGVudGlvbk1vbml0b3JpbmdTdXBwb3J0ZWQBACF0aHJlYWRDb250ZW50aW9uTW9uaXRvcmluZ1N1cHBvcnQMACEAFQkAAgAiAQAfaXNDdXJyZW50VGhyZWFkQ3B1VGltZVN1cHBvcnRlZAEAG2N1cnJlbnRUaHJlYWRDcHVUaW1lU3VwcG9ydAwAJQAVCQACACYBAB1pc090aGVyVGhyZWFkQ3B1VGltZVN1cHBvcnRlZAEAGW90aGVyVGhyZWFkQ3B1VGltZVN1cHBvcnQMACkAFQkAAgAqAQAYaXNCb290Q2xhc3NQYXRoU3VwcG9ydGVkAQAUYm9vdENsYXNzUGF0aFN1cHBvcnQMAC0AFQkAAgAuAQAdaXNPYmplY3RNb25pdG9yVXNhZ2VTdXBwb3J0ZWQBABlvYmplY3RNb25pdG9yVXNhZ2VTdXBwb3J0DAAxABUJAAIAMgEAHGlzU3luY2hyb25pemVyVXNhZ2VTdXBwb3J0ZWQBABhzeW5jaHJvbml6ZXJVc2FnZVN1cHBvcnQMADUAFQkAAgA2AQAgaXNUaHJlYWRBbGxvY2F0ZWRNZW1vcnlTdXBwb3J0ZWQBABx0aHJlYWRBbGxvY2F0ZWRNZW1vcnlTdXBwb3J0DAA5ABUJAAIAOgEAGWlzR2NOb3RpZmljYXRpb25TdXBwb3J0ZWQBABVnY05vdGlmaWNhdGlvblN1cHBvcnQMAD0AFQkAAgA+AQAjaXNSZW1vdGVEaWFnbm9zdGljQ29tbWFuZHNTdXBwb3J0ZWQBAB9yZW1vdGVEaWFnbm9zdGljQ29tbWFuZHNTdXBwb3J0DABBABUJAAIAQgEAI2lzVGhyZWFkQ29udGVudGlvbk1vbml0b3JpbmdFbmFibGVkAQAWaXNUaHJlYWRDcHVUaW1lRW5hYmxlZAEAHmlzVGhyZWFkQWxsb2NhdGVkTWVtb3J5RW5hYmxlZAEAE2dldExvYWRlZENsYXNzQ291bnQBAAMoKUkBABJnZXRUb3RhbENsYXNzQ291bnQBAAMoKUoMAEkASgoAAgBLAQAVZ2V0VW5sb2FkZWRDbGFzc0NvdW50DABNAEoKAAIATgEAD2dldFZlcmJvc2VDbGFzcwEADGdldFZlcmJvc2VHQwEAFGdldE1hbmFnZW1lbnRWZXJzaW9uAQAHdmVyc2lvbgEAEkxqYXZhL2xhbmcvU3RyaW5nOwwAUwBUCQACAFUBAAdnZXRWbUlkAQAdamF2YS9uZXQvVW5rbm93bkhvc3RFeGNlcHRpb24HAFgBABBqYXZhL2xhbmcvU3RyaW5nBwBaAQANU3RhY2tNYXBUYWJsZQEADGdldFByb2Nlc3NJZAwAXQBICgACAF4BAAlsb2NhbGhvc3QIAGABABRqYXZhL25ldC9JbmV0QWRkcmVzcwcAYgEADGdldExvY2FsSG9zdAEAGCgpTGphdmEvbmV0L0luZXRBZGRyZXNzOwwAZABlCgBjAGYBAAtnZXRIb3N0TmFtZQwAaAAZCgBjAGkBABdqYXZhL2xhbmcvU3RyaW5nQnVpbGRlcgcAawoAbAAKAQAGYXBwZW5kAQAcKEkpTGphdmEvbGFuZy9TdHJpbmdCdWlsZGVyOwwAbgBvCgBsAHABAAFACAByAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZ0J1aWxkZXI7DABuAHQKAGwAdQEACHRvU3RyaW5nDAB3ABkKAGwAeAEACWdldFZtTmFtZQEADGphdmEudm0ubmFtZQgAewEAEGphdmEvbGFuZy9TeXN0ZW0HAH0BAAtnZXRQcm9wZXJ0eQEAJihMamF2YS9sYW5nL1N0cmluZzspTGphdmEvbGFuZy9TdHJpbmc7DAB/AIAKAH4AgQEAC2dldFZtVmVuZG9yAQAOamF2YS52bS52ZW5kb3IIAIQBAAxnZXRWbVZlcnNpb24BAA9qYXZhLnZtLnZlcnNpb24IAIcBAA1nZXRWbVNwZWNOYW1lAQAaamF2YS52bS5zcGVjaWZpY2F0aW9uLm5hbWUIAIoBAA9nZXRWbVNwZWNWZW5kb3IBABxqYXZhLnZtLnNwZWNpZmljYXRpb24udmVuZG9yCACNAQAQZ2V0Vm1TcGVjVmVyc2lvbgEAHWphdmEudm0uc3BlY2lmaWNhdGlvbi52ZXJzaW9uCACQAQAMZ2V0Q2xhc3NQYXRoAQAPamF2YS5jbGFzcy5wYXRoCACTAQAOZ2V0TGlicmFyeVBhdGgBABFqYXZhLmxpYnJhcnkucGF0aAgAlgEAEGdldEJvb3RDbGFzc1BhdGgBACVzdW4vc2VjdXJpdHkvYWN0aW9uL0dldFByb3BlcnR5QWN0aW9uBwCZAQATc3VuLmJvb3QuY2xhc3MucGF0aAgAmwEAFShMamF2YS9sYW5nL1N0cmluZzspVgwABwCdCgCaAJ4BAB5qYXZhL3NlY3VyaXR5L0FjY2Vzc0NvbnRyb2xsZXIHAKABAAxkb1ByaXZpbGVnZWQBADQoTGphdmEvc2VjdXJpdHkvUHJpdmlsZWdlZEFjdGlvbjspTGphdmEvbGFuZy9PYmplY3Q7DACiAKMKAKEApAEACWdldFVwdGltZQEACmdldFVwdGltZTAMAKcASgoAAgCoAQAOZ2V0Vm1Bcmd1bWVudHMBABIoKUxqYXZhL3V0aWwvTGlzdDsBAAlTaWduYXR1cmUBACYoKUxqYXZhL3V0aWwvTGlzdDxMamF2YS9sYW5nL1N0cmluZzs+OwEAE2phdmEvdXRpbC9BcnJheUxpc3QHAK4KAK8ACgEAEy1YWDorQWdncmVzc2l2ZUhlYXAIALEBAA5qYXZhL3V0aWwvTGlzdAcAswEAA2FkZAEAFShMamF2YS9sYW5nL09iamVjdDspWgwAtQC2CwC0ALcBABItWFg6K1VzZVBhcmFsbGVsR0MIALkBAA9nZXRWbUFyZ3VtZW50czABABUoKVtMamF2YS9sYW5nL1N0cmluZzsBAA5nZXRTdGFydHVwVGltZQEAFmdldEF2YWlsYWJsZVByb2Nlc3NvcnMBAA9nZXRDb21waWxlck5hbWUBACFzdW4vbWFuYWdlbWVudC9WTU1hbmFnZW1lbnRJbXBsJDEHAMABACQoTHN1bi9tYW5hZ2VtZW50L1ZNTWFuYWdlbWVudEltcGw7KVYMAAcAwgoAwQDDAQATZ2V0VG90YWxDb21waWxlVGltZQEAE2dldFRvdGFsVGhyZWFkQ291bnQBABJnZXRMaXZlVGhyZWFkQ291bnQBABJnZXRQZWFrVGhyZWFkQ291bnQBABRnZXREYWVtb25UaHJlYWRDb3VudAEACWdldE9zTmFtZQEAB29zLm5hbWUIAMsBAAlnZXRPc0FyY2gBAAdvcy5hcmNoCADOAQAMZ2V0T3NWZXJzaW9uAQAKb3MudmVyc2lvbggA0QEAEWdldFNhZmVwb2ludENvdW50AQAVZ2V0VG90YWxTYWZlcG9pbnRUaW1lAQAUZ2V0U2FmZXBvaW50U3luY1RpbWUBACFnZXRUb3RhbEFwcGxpY2F0aW9uTm9uU3RvcHBlZFRpbWUBABJnZXRMb2FkZWRDbGFzc1NpemUBABRnZXRVbmxvYWRlZENsYXNzU2l6ZQEAE2dldENsYXNzTG9hZGluZ1RpbWUBABFnZXRNZXRob2REYXRhU2l6ZQEAGGdldEluaXRpYWxpemVkQ2xhc3NDb3VudAEAGmdldENsYXNzSW5pdGlhbGl6YXRpb25UaW1lAQAYZ2V0Q2xhc3NWZXJpZmljYXRpb25UaW1lAQAWZ2V0UGVyZkluc3RydW1lbnRhdGlvbgEAMygpTHN1bi9tYW5hZ2VtZW50L2NvdW50ZXIvcGVyZi9QZXJmSW5zdHJ1bWVudGF0aW9uOwEAImphdmEvbGFuZy9JbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24HAOABABNqYXZhL2lvL0lPRXhjZXB0aW9uBwDiAQANc3VuL21pc2MvUGVyZgcA5AEAE2phdmEvbmlvL0J5dGVCdWZmZXIHAOYBABtzdW4vbWlzYy9QZXJmJEdldFBlcmZBY3Rpb24HAOgKAOkACgEAAXIIAOsBAAZhdHRhY2gBACooSUxqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9u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");
        } else if (className.equals("common/AuthCrypto")) {
            System.out.println("Applying Patch #2");
            modify();
            // The Base64 encoded class bytes containing the modified byte code for `AuthCrypto`
            // This is just a placeholder. Actual byte code modification is needed here.
            classfileBuffer = Base64.getDecoder().decode("yv66vgAAADQAp...");
        }
        return classfileBuffer;
    }

    private void modify() {
        try {
            byte[] md5 = MD5(readAll(getClass().getClassLoader().getResourceAsStream("resources/authkey.pub")));
            byte[] readAll = readAll(getClass().getClassLoader().getResourceAsStream("resources/我们自己的公钥key文件.pub"));
            if (!"8bb4df00c120881a1945a43e2bb2379e".equals(toHex(md5))) {
                printError("Invalid authorization file");
                System.exit(0);
            }
            this.f1C = KeyFactory.getInstance("RSA").generatePublic(new X509EncodedKeySpec(readAll));
        } catch (Exception e) {
            this.f2B = "Could not deserialize authpub.key";
            logException("authpub.key deserialization", e);
        }
    }

    private byte[] readAll(java.io.InputStream is) throws java.io.IOException {
        java.io.ByteArrayOutputStream buffer = new java.io.ByteArrayOutputStream();
        int nRead;
        byte[] data = new byte[16384];
        while ((nRead = is.read(data, 0, data.length)) != -1) {
            buffer.write(data, 0, nRead);
        }
        buffer.flush();
        return buffer.toByteArray();
    }

    private byte[] MD5(byte[] data) throws Exception {
        MessageDigest md = MessageDigest.getInstance("MD5");
        return md.digest(data);
    }

    private String toHex(byte[] bytes) {
        StringBuilder sb = new StringBuilder();
        for (byte b : bytes) {
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }

    private void printError(String message) {
        System.err.println(message);
    }

    private void logException(String context, Exception e) {
        System.err.println(context);
        e.printStackTrace(System.err);
    }
}
